.table
int c_1
int b_1
int i_1
float a_1
int n_5
int i_6
float n_6
float FL_6[]={0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}
int FL_6_size=0
float FL2_6[]={0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}
int FL2_6_size=0
int w_6
int a_6
int b_6

.code

teste:
mov $1, i_1
println $1
mov $2, a_1
println $2
mov $3, b_1
println $3
mov $4, c_1
println $4
mov $5, i_1
mov $6, 1
sub $7, $5, $6
not $7, $7
brz IF_ELSE_1, $7
print 'i'
print ' '
print 'e'
print 'h'
print ' '
print '1'
print '\n'
mov $8, i_1
mov $9, 1
add $10, $8, $9
return $10
jump END_IF_ELSE_2
IF_ELSE_1:
mov $1, a_1
mov $2, 0
inttofl $3, $2
sub $4, $1, $3
return $4
END_IF_ELSE_2:
return 0

hello_world:
print 'H'
print 'e'
print 'l'
print 'l'
print 'o'
print ' '
print 'W'
print 'o'
print 'r'
print 'l'
print 'd'
print '!'
print '\n'
return 0

hello_world_n:
print 'H'
print 'e'
print 'l'
print 'l'
print 'o'
print ' '
print 'W'
print 'o'
print 'r'
print 'l'
print 'd'
print ' '
mov $1, n_5
println $1
mov $2, n_5
return $2
return 0

main:
mov $1, 10
mov i_6, $1
mov $2, 3.500000
mov n_6, $2
mov $3, FL_6_size
mov $4, &FL_6
mov $5, 1
inttofl $6, $5
mov $4[$3], $6
add FL_6_size, FL_6_size, 1
add $3, $3, 1
mov $7, 4
mov $8, 2
add $9, $7, $8
mov $10, 1
mov $11, 7.000000
inttofl $12, $10
sub $13, $12, $11
inttofl $14, $9
mul $15, $14, $13
mov $4[$3], $15
add FL_6_size, FL_6_size, 1
add $3, $3, 1
mov $16, FL2_6_size
mov $17, &FL2_6
mov $18, i_6
inttofl $19, $18
mov $17[$16], $19
add FL2_6_size, FL2_6_size, 1
add $16, $16, 1
mov $20, FL2_6_size
mov $21, &FL2_6
mov $22, &FL_6
mov $23, 0
LOOP_WRITE_3:
slt $24, $23, FL_6_size
brz END_WRITE_LOOP_4,  $24
mov $26, $22[$23]
mov $21[$20], $26
add $20, $20, 1
add FL2_6_size, FL2_6_size, 1
add $23, $23, 1
jump LOOP_WRITE_3
END_WRITE_LOOP_4:
mov $27, &FL2_6
mov $28, $27[0]
println $28
mov $29, &FL_6
mov $30, $29[0]
println $30
mov $31, 7
minus $32, $31
mov w_6, $32
mov $33, w_6
not $34, $33
brz IF_ELSE_4, $34
print 'e'
print 'r'
print 'r'
print 'a'
print 'd'
print 'o'
print '.'
print '\n'
jump END_IF_ELSE_5
IF_ELSE_4:
print 'c'
print 'e'
print 'r'
print 't'
print 'o'
print '.'
print '\n'
END_IF_ELSE_5:
mov $35, w_6
println $35
call hello_world
mov $36, #0
mov $37, n_6
mov $38, 2
inttofl $39, $38
mul $40, $37, $39
mov $41, 5
inttofl $42, $41
sub $43, $40, $42
push $43
pop $44
fltoint $45, $44
mov n_5, $45
call hello_world_n
mov $46, #0
mov $47, i_6
brz IF_END_6, $47
mov $48, 5
mov i_6, $48
FOR_7:
mov $49, i_6
mov $50, 0
sleq $51, $50, $49
brz FOR_END_8, $51
mov $52, i_6
mov $53, 2
slt $54, $53, $52
brz IF_ELSE_9, $54
print 'a'
print '\n'
jump END_IF_ELSE_10
IF_ELSE_9:
print 'b'
print '\n'
END_IF_ELSE_10:
mov $55, i_6
mov $56, 1
sub $57, $55, $56
mov i_6, $57
jump FOR_7
FOR_END_8:
IF_END_6:
mov $58, 3.500000
mov $59, 2
inttofl $60, $59
add $61, $58, $60
mov $62, 7
inttofl $63, $62
mul $64, $61, $63
mov $65, 4
inttofl $66, $65
div $67, $64, $66
mov $68, 2
inttofl $69, $68
sub $70, $67, $69
fltoint $71, $70
mov a_6, $71
scani b_6
mov $72, a_6
mov $73, b_6
and $74, $72, $73
brz IF_END_12, $74
print 'A'
print ' '
print 'a'
print 'n'
print 'd'
print ' '
print 'B'
print '\n'
mov $75, a_6
println $75
mov $76, b_6
println $76
IF_END_12:
mov $77, a_6
mov $78, b_6
or $79, $77, $78
brz IF_END_14, $79
print 'A'
print ' '
print 'o'
print 'r'
print ' '
print 'B'
print '\n'
print 'a'
print '='
mov $80, a_6
println $80
print 'b'
print '='
mov $81, b_6
println $81
IF_END_14:
mov $82, 0
mov a_6, $82
mov $83, a_6
mov $84, b_6
and $85, $83, $84
brz IF_END_16, $85
print 'A'
print ' '
print 'a'
print 'n'
print 'd'
print ' '
print 'B'
print ','
print ' '
print 'a'
print '='
print '0'
print '\n'
print 'a'
print '='
mov $86, a_6
println $86
print 'b'
print '='
mov $87, b_6
println $87
IF_END_16:
mov $88, a_6
mov $89, b_6
or $90, $88, $89
mov $91, a_6
and $92, $90, $91
brz IF_END_18, $92
print '('
print 'A'
print ' '
print 'o'
print 'r'
print ' '
print 'B'
print ')'
print ' '
print 'a'
print 'n'
print 'd'
print ' '
print 'A'
print ','
print ' '
print 'a'
print '='
print '0'
print '\n'
print 'a'
print '='
mov $93, a_6
println $93
print 'b'
print '='
mov $94, b_6
println $94
IF_END_18:
mov $95, a_6
mov $96, a_6
sub $97, $95, $96
not $97, $97
brz IF_END_20, $97
print '('
print 'A'
print ' '
print '='
print '='
print ' '
print 'A'
print ')'
print ' '
print 'a'
print 'n'
print 'd'
print ' '
print 'A'
print ','
print ' '
print 'a'
print '='
print '0'
print '\n'
print 'a'
print '='
mov $98, a_6
println $98
print 'b'
print '='
mov $99, b_6
println $99
IF_END_20:
mov $100, a_6
mov $101, b_6
sub $102, $100, $101
brz IF_ELSE_22, $102
print '('
print 'A'
print ' '
print '!'
print '='
print ' '
print 'B'
print ')'
print ' '
print 'a'
print 'n'
print 'd'
print ' '
print 'A'
print ','
print ' '
print 'a'
print '='
print '0'
print '\n'
print 'a'
print '='
mov $103, a_6
println $103
print 'b'
print '='
mov $104, b_6
println $104
jump END_IF_ELSE_23
IF_ELSE_22:
print '('
print 'A'
print ' '
print '='
print '='
print ' '
print 'B'
print ')'
print ' '
print 'a'
print 'n'
print 'd'
print ' '
print 'A'
print ','
print ' '
print 'a'
print '='
print '0'
print '\n'
print 'a'
print '='
mov $105, a_6
println $105
print 'b'
print '='
mov $106, b_6
println $106
END_IF_ELSE_23:
mov $107, i_6
push $107
mov $108, a_6
push $108
mov $109, 10
mov $110, 3
div $111, $109, $110
push $111
mov $112, 1
mov $113, 5
sub $114, $112, $113
push $114
pop $115
mov c_1, $115
pop $116
mov b_1, $116
pop $117
inttofl $118, $117
mov a_1, $118
pop $119
mov i_1, $119
call teste
mov $120, #0
mov i_6, $120
print 'R'
print 'e'
print 't'
print 'o'
print 'r'
print 'n'
print 'o'
print ' '
print 'd'
print 'a'
print ' '
print 'f'
print 'u'
print 'n'
print 'c'
print 'a'
print 'o'
print ' '
print 'c'
print 'o'
print 'm'
print ' '
print 'i'
print ' '
print 'e'
print ' '
print 'a'
print ':'
mov $121, i_6
println $121
println 
